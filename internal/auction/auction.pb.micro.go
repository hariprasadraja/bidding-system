// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: internal/auction/auction.proto

package auction

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Auction service

func NewAuctionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Auction service

type AuctionService interface {
	Create(ctx context.Context, in *AuctionRequest, opts ...client.CallOption) (*Response, error)
	Update(ctx context.Context, in *AuctionRequest, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	GetLive(ctx context.Context, in *NoRequest, opts ...client.CallOption) (*All, error)
	GetAll(ctx context.Context, in *NoRequest, opts ...client.CallOption) (*All, error)
	IncreaseBid(ctx context.Context, in *Bid, opts ...client.CallOption) (*NoResponse, error)
}

type auctionService struct {
	c    client.Client
	name string
}

func NewAuctionService(name string, c client.Client) AuctionService {
	return &auctionService{
		c:    c,
		name: name,
	}
}

func (c *auctionService) Create(ctx context.Context, in *AuctionRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auction.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionService) Update(ctx context.Context, in *AuctionRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auction.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Auction.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "Auction.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionService) GetLive(ctx context.Context, in *NoRequest, opts ...client.CallOption) (*All, error) {
	req := c.c.NewRequest(c.name, "Auction.GetLive", in)
	out := new(All)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionService) GetAll(ctx context.Context, in *NoRequest, opts ...client.CallOption) (*All, error) {
	req := c.c.NewRequest(c.name, "Auction.GetAll", in)
	out := new(All)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionService) IncreaseBid(ctx context.Context, in *Bid, opts ...client.CallOption) (*NoResponse, error) {
	req := c.c.NewRequest(c.name, "Auction.IncreaseBid", in)
	out := new(NoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auction service

type AuctionHandler interface {
	Create(context.Context, *AuctionRequest, *Response) error
	Update(context.Context, *AuctionRequest, *Response) error
	Delete(context.Context, *DeleteRequest, *Response) error
	Get(context.Context, *GetRequest, *GetResponse) error
	GetLive(context.Context, *NoRequest, *All) error
	GetAll(context.Context, *NoRequest, *All) error
	IncreaseBid(context.Context, *Bid, *NoResponse) error
}

func RegisterAuctionHandler(s server.Server, hdlr AuctionHandler, opts ...server.HandlerOption) error {
	type auction interface {
		Create(ctx context.Context, in *AuctionRequest, out *Response) error
		Update(ctx context.Context, in *AuctionRequest, out *Response) error
		Delete(ctx context.Context, in *DeleteRequest, out *Response) error
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		GetLive(ctx context.Context, in *NoRequest, out *All) error
		GetAll(ctx context.Context, in *NoRequest, out *All) error
		IncreaseBid(ctx context.Context, in *Bid, out *NoResponse) error
	}
	type Auction struct {
		auction
	}
	h := &auctionHandler{hdlr}
	return s.Handle(s.NewHandler(&Auction{h}, opts...))
}

type auctionHandler struct {
	AuctionHandler
}

func (h *auctionHandler) Create(ctx context.Context, in *AuctionRequest, out *Response) error {
	return h.AuctionHandler.Create(ctx, in, out)
}

func (h *auctionHandler) Update(ctx context.Context, in *AuctionRequest, out *Response) error {
	return h.AuctionHandler.Update(ctx, in, out)
}

func (h *auctionHandler) Delete(ctx context.Context, in *DeleteRequest, out *Response) error {
	return h.AuctionHandler.Delete(ctx, in, out)
}

func (h *auctionHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.AuctionHandler.Get(ctx, in, out)
}

func (h *auctionHandler) GetLive(ctx context.Context, in *NoRequest, out *All) error {
	return h.AuctionHandler.GetLive(ctx, in, out)
}

func (h *auctionHandler) GetAll(ctx context.Context, in *NoRequest, out *All) error {
	return h.AuctionHandler.GetAll(ctx, in, out)
}

func (h *auctionHandler) IncreaseBid(ctx context.Context, in *Bid, out *NoResponse) error {
	return h.AuctionHandler.IncreaseBid(ctx, in, out)
}
